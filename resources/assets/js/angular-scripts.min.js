var programPlannerModule = angular.module('programPlannerApp',
		['ngFileUpload','ngSanitize', 'ui.select', 'ui.bootstrap','ui.bootstrap.showErrors'],
		function($interpolateProvider){
			$interpolateProvider.startSymbol('<%');
			$interpolateProvider.endSymbol('%>');
		}
	);
programPlannerModule.constant("DATE_FORMAT", "en-US")

//taken from http://jsfiddle.net/lancelarsen/Tx7Ty/
programPlannerModule.filter('decimal', function ($filter) {
	return function (input, places) {
		if (isNaN(input)) return input;
		// If we want 1 decimal place, we want to multi/div by 10
		// If we want 2 decimal places, we want to multi/div by 100, etc
		// So use the following to create that factor
		var factor = "1" + Array(+(places > 0 && places + 1)).join("0");
		return Math.round(input * factor) / factor;
	};
});


/**
 * AngularHelper : Contains methods that help using angular without being in the scope of an angular controller or directive
 * based on an answer from http://stackoverflow.com/questions/19845950/angularjs-how-to-dynamically-add-html-and-bind-to-controller
 */
var AngularHelper = (function ()
{
	var AngularHelper = function () { };
	/**
     * ApplicationName : Default application name for the helper
     */
	var defaultApplicationName = "programPlannerApp";

	/**
     * Compile : Compile html with the rootScope of an application
     *  and replace the content of a target element with the compiled html
     * @elementId : The ID for the container where the html will be placed
     * @htmlToCompile : The html to compile using angular
     */
	AngularHelper.Compile = function (elementId, htmlToCompile)
	{
		var $injector = angular.injector(["ng", defaultApplicationName]);
		$injector.invoke(["$compile", "$rootScope", function ($compile, $rootScope)
		{
			var element = angular.element(document.getElementById(elementId));
			//Get the scope of the target, use the rootScope if it does not exist
			var $scope = element.html(htmlToCompile).scope();
			$compile(element)($scope || $rootScope);
			$rootScope.$digest();
		}]);
	}
	return AngularHelper;
})();
/// This ensures that any parent elements with click events (such as a table row) do not fire

programPlannerModule.directive('preventEventBubblingOnClick', [function () {

	return {
		restrict: 'A',
		link: function (scope, element, attrs)
		{
			element.bind('click', function(e)
			{
				e.stopPropagation();
			});
		}
	};

}]);
/// allows injecting data directly into the controller scope.
/// set parse-json to 'true' to get angular to parse the value as JSON.
/// note that any values set this way will not be initialised when the controller is initialised so allow for late binding
/// example:
/// <server-side-data bind-property="ctrl.property" value="server-side-value" parse-json="false"></server-side-data>
///
programPlannerModule.directive('serverSideData', [function () {

    return {
        scope: {
            bindProperty: '='
        },

        link: function (scope, element, attrs)
        {
            if (attrs.parseJson === 'true') {
                scope.bindProperty = angular.fromJson(attrs.value);
            } else {
                scope.bindProperty = attrs.value;
            }
        }
    };

}]);
function ProgramPlannerApiService($http, $q) {
    return {
        getCompulsoryCourse: function(programId) {
            return $http.get('/admin/programs/'+ programId +'/compulsory/index')
                .then(function(response) {
                    return response.data;
                });
        },
        addCompulsoryCourse: function(programId, courseId) {
            return $http.get('/admin/programs/'+ programId +'/compulsory/create/' + courseId)
                .then(function(response) {
                    return response.data;
                });
        },
        removeCompulsoryCourse: function(programId, courseId) {
            return $http.get('/admin/programs/'+ programId +'/compulsory/destroy/' + courseId)
                .then(function(response) {
                    return response.data;
                });
        },
        addProgramSemesterCourse: function(request) {
            return $http.post('/admin/program_semesters/'+request.program_semester_id+'/courses/create', request)
                .then(function(response) {
                    return response.data;
                });
        },
        removeProgramSemesterCourse: function(request) {
            return $http.post('/admin/program_semesters/'+request.program_semester_id+'/courses/destroy', request)
                .then(function(response) {
                    return response.data;
                });
        },
        addPathwaySemesterCourse: function(request) {
            return $http.post('/admin/pathway_semesters/'+request.pathway_semester_id+'/courses/create', request)
                .then(function(response) {
                    return response.data;
                });
        },
        removePathwaySemesterCourse: function(request) {
            return $http.post('/admin/pathway_semesters/'+request.pathway_semester_id+'/courses/destroy', request)
                .then(function(response) {
                    return response.data;
                });
        },
        getCourses: function(){
            return $http.get('/admin/api/courses')
                .then(function(response){
                    return response.data;
                });
        },
    }
}

programPlannerModule.factory("programPlannerApiService", ["$http", "$q", ProgramPlannerApiService]);
function StringFormatter()
{
	function formatNumber(value, maxDigits)
	{
		if (!value)
		{
			return applyNumberFormat(0);
		}

		var absValue = Math.abs(value);

		if (absValue >= 100000000000)
		{
			//123B
			return applyNumberFormat(value / 1000000000, maxDigits - 3) + 'B';
		}
		if (absValue >= 10000000000)
		{
			//12.3B
			return applyNumberFormat(value / 1000000000, maxDigits - 2) + 'B';
		}
		if (absValue >= 1000000000)
		{
			//1.23B
			return applyNumberFormat(value / 1000000000, maxDigits - 1) + 'B';
		}

		if (absValue >= 100000000)
		{
			//123M
			return applyNumberFormat(value / 1000000, maxDigits - 3) + 'M';
		}
		if (absValue >= 10000000)
		{
			//12.3M
			return applyNumberFormat(value / 1000000, maxDigits - 2) + 'M';
		}
		if (absValue >= 1000000)
		{
			//1.23M
			return applyNumberFormat(value / 1000000, maxDigits - 1) + 'M';
		}

		if (absValue >= 100000)
		{
			//123K
			return applyNumberFormat(value / 1000, maxDigits - 3) + 'K';
		}
		if (absValue >= 10000)
		{
			//12.3K
			return applyNumberFormat(value / 1000, maxDigits - 2) + 'K';
		}
		if (absValue >= 1000)
		{
			//1.23K
			return applyNumberFormat(value / 1000, maxDigits - 1) + 'K';
		}

		return applyNumberFormat(value, 2);
	}

	function applyNumberFormat(value, decimalPlaces)
	{
		return parseFloat(value.toFixed(decimalPlaces));
	}

	return {
		formatAsShortCurrency: function(value, maxDigits)
		{
			if (!maxDigits)
			{
				maxDigits = 3;
			}
			return '$' + formatNumber(value, maxDigits);
		},

		formatAsShortNumber: function(value, maxDigits)
		{
			if (!maxDigits)
			{
				maxDigits = 3;
			}
			return formatNumber(value, maxDigits);
		}
	}
}

//expose this as a service you can inject into your controllers
programPlannerModule.factory('stringFormatter', [StringFormatter]);

//and as a filter you can use in your angular markup
programPlannerModule.filter('shortCurrency', ['stringFormatter', function(stringFormatter)
{
	return function(input)
	{
		return stringFormatter.formatAsShortCurrency(input);
	}
}]);
function AdminPathwaySemesterCourseController($scope, $timeout, programPlannerApiService) {
    var self = this;
    self.initialData = null;
    self.pathwaySemester = [];
    self.programId = 0;
    self.compulsoryCourses = [];
    self.pathwayId = 0;
    self.pathwaySemesterId = 0;
    self.courses = [];
    self.newCourse = null;
    self.error = false;
    self.message = null;

    this.init = function () {
        $scope.$watch(
            function () {
                return self.initialData;
            }, function (newValue) {
                if (newValue != null) {
                    self.pathwaySemester = newValue;
                    self.pathwayId =  newValue["pathway_id"];
                    self.programId =  newValue["program_id"];
                    self.pathwaySemesterId =  newValue["id"];
                    self.updateCompulsoryCourses();
                    self.getCourses();
                }
            }
        )
    }

    /**
     * displays a message in relation to this semester
     * @param message
     * @param type
     */
    this.setMessage =   function(message, type){
        console.log(message);
        if(message && message.length > 0){
            self.message = {
                content: message,
                type: type
            };
            // null message after five seconds
            $timeout(function() {
                self.message = null;
            }, 5000);
        }
    }

    /**
     * processes the response and displays error/ success message
     * @param response
     * @param responseType
     */
    this.processResponse = function(response, responseType){
        console.log(response.message);
        if(responseType){
            console.log('error!');
            self.error = true;
            return;
        }
        if (!response.success) {
            console.log('error!');
            self.error = true;
            self.setMessage(response.message, "danger");
        } else {
            console.log('ok!');
            self.error = false;
            self.setMessage(response.message, "success");
        }
        return;
    }

    /**
     * gets the list of compulsory courses for this pathway
      */
    this.updateCompulsoryCourses = function(){
        programPlannerApiService.getCompulsoryCourse(self.programId)
            .then(function (response) {
                if (!response.success) {
                    self.processResponse(response);
                    return;
                }
                self.compulsoryCourses = response.data;
                self.processResponse(response);
            })
            .catch(function (response) {
                self.processResponse(response, "error");
            })
            .finally(function () {
            });

    }

    /**
     * get the list of all courses available for this pathway
     */
    this.getCourses = function(){
        programPlannerApiService.getCourses()
            .then(function (response) {
                if (!response.success) {
                    self.processResponse(response);
                    return;
                }
                self.courses = response.data;
                self.processResponse(response);
            })
            .catch(function (response) {
                self.processResponse(response, "error");
            })
            .finally(function () {
            });

    }

    /**
     * add a course to this instance of semester
     */
    this.addCourseToSemester = function () {
        if(self.newCourse !== null){
            var request = {
                pathway_id: self.pathwayId,
                pathway_semester_id : self.pathwaySemesterId,
                course_id : self.newCourse.id
            };
            programPlannerApiService.addPathwaySemesterCourse(request)
                .then(function (response) {
                    if (!response.success) {
                        self.processResponse(response);
                        return;
                    }
                    // add course to semester
                    self.pathwaySemester["courses"].push(self.newCourse);
                    self.newCourse = null;
                    self.processResponse(response);
                })
                .catch(function (response) {
                    self.processResponse(response, "error");
                })
                .finally(function () {
                });
        }
    }

    /**
     * remove course from this instance of semester
     * @param course
     */
    this.removeCourseFromSemester = function (course) {
        if(course !== null){
            var request = {
                pathway_id: self.pathwayId,
                pathway_semester_id : self.pathwaySemesterId,
                course_id : course.id
            };
            programPlannerApiService.removePathwaySemesterCourse(request)
                .then(function (response) {
                    if (!response.success) {
                        self.processResponse(response);
                        return;
                    }
                    // remove course to semester
                    // remove from compulsory courses
                    var index = self.pathwaySemester["courses"].indexOf(course);
                    self.pathwaySemester["courses"].splice(index, 1);
                    self.processResponse(response);
                })
                .catch(function (response) {
                    self.processResponse(response, "error");
                })
                .finally(function () {
                });
        }
    }

    this.init();
}
programPlannerModule.controller("adminPathwaySemesterCourseController", ["$scope", "$timeout", "programPlannerApiService", AdminPathwaySemesterCourseController]);

function AdminProgramSemesterCourseController($scope, $uibModal, $timeout, programPlannerApiService) {
    var self = this;
    self.initialData = null;
    self.programSemester = [];
    self.compulsoryCourses = [];
    self.programId = 0;
    self.programSemesterId = 0;
    self.courses = [];
    self.newCourse = null;
    self.error = false;
    self.message = null;

    this.init = function () {
        $scope.$watch(
            function () {
                return self.initialData;
            }, function (newValue) {
                if (newValue != null) {
                    self.programSemester = newValue;
                    self.programId =  newValue["program_id"];
                    self.programSemesterId =  newValue["id"];
                    self.updateCompulsoryCourses();
                    self.getCourses();
                }
            }
        )
    }

    /**
     * displays a message in relation to this semester
     * @param message
     * @param type
     */
    this.setMessage =   function(message, type){
        console.log(message);
        if(message && message.length > 0){
            self.message = {
                content: message,
                type: type
            };
            // null message after five seconds
            $timeout(function() {
                self.message = null;
            }, 5000);
        }
    }

    /**
     * processes the response and displays error/ success message
     * @param response
     * @param responseType
     */
    this.processResponse = function(response, responseType){
        console.log(response.message);
        if(responseType){
            console.log('error!');
            self.error = true;
            return;
        }
        if (!response.success) {
            console.log('error!');
            self.error = true;
            self.setMessage(response.message, "danger");
        } else {
            console.log('ok!');
            self.error = false;
            self.setMessage(response.message, "success");
        }
        return;
    }

    /**
     * gets the list of compulsory courses for this program
      */
    this.updateCompulsoryCourses = function(){
        programPlannerApiService.getCompulsoryCourse(self.programId)
            .then(function (response) {
                if (!response.success) {
                    self.processResponse(response);
                    return;
                }
                self.compulsoryCourses = response.data;
                self.processResponse(response);
            })
            .catch(function (response) {
                self.processResponse(response, "error");
            })
            .finally(function () {
            });

    }

    /**
     * get the list of all courses available for this program
     */
    this.getCourses = function(){
        programPlannerApiService.getCourses()
            .then(function (response) {
                if (!response.success) {
                    self.processResponse(response);
                    return;
                }
                self.courses = response.data;
                self.processResponse(response);
            })
            .catch(function (response) {
                self.processResponse(response, "error");
            })
            .finally(function () {
            });

    }

    this.toggleCourseCompulsory = function(course){
        var courseId = course.id;
        course.isLoading = true;
        if(self.compulsoryCourses.indexOf(courseId) === -1){
            this.addCompulsoryCourse(self.programId, course);
        } else {
            this.removeCompulsoryCourse(self.programId, course);
        }
    }

    /**
     * mark course as compulsory - applies program wide
     * @param programId
     * @param course
     */
    this.addCompulsoryCourse = function(programId, course){
        programPlannerApiService.addCompulsoryCourse(programId, course.id)
            .then(function (response) {
                if (!response.success) {
                    self.processResponse(response);
                    return;
                }
                // add to compulsory courses
                self.compulsoryCourses.push(course.id);
                self.processResponse(response);
            })
            .catch(function (response) {
                self.processResponse(response, "error");
            })
            .finally(function () {
                course.isLoading = false;
            });
    }

    /**
     * mark course as optional - applies program wide
     * @param programId
     * @param course
     */
    this.removeCompulsoryCourse = function(programId, course){
        programPlannerApiService.removeCompulsoryCourse(programId, course.id)
            .then(function (response) {
                if (!response.success) {
                    self.processResponse(response);
                    return;
                }
                // remove from compulsory courses
                var index = self.compulsoryCourses.indexOf(course.id);
                self.compulsoryCourses.splice(index, 1);
                self.processResponse(response);
            })
            .catch(function (response) {
                self.processResponse(response, "error");
            })
            .finally(function () {
                course.isLoading = false;
            });
    }

    /**
     * add a course to this instance of semester
     */
    this.addCourseToSemester = function () {
        if(self.newCourse !== null){
            var request = {
                program_id: self.programId,
                program_semester_id : self.programSemesterId,
                course_id : self.newCourse.id
            };
            programPlannerApiService.addProgramSemesterCourse(request)
                .then(function (response) {
                    if (!response.success) {
                        self.processResponse(response);
                        return;
                    }
                    // add course to semester
                    self.programSemester["courses"].push(self.newCourse);
                    self.newCourse = null;
                    self.processResponse(response);
                })
                .catch(function (response) {
                    self.processResponse(response, "error");
                })
                .finally(function () {
                });
        }
    }

    /**
     * remove course from this instance of semester
     * @param course
     */
    this.removeCourseFromSemester = function (course) {
        if(course !== null){
            var request = {
                program_id: self.programId,
                program_semester_id : self.programSemesterId,
                course_id : course.id
            };
            programPlannerApiService.removeProgramSemesterCourse(request)
                .then(function (response) {
                    if (!response.success) {
                        self.processResponse(response);
                        return;
                    }
                    // remove course to semester
                    // remove from compulsory courses
                    var index = self.programSemester["courses"].indexOf(course);
                    self.programSemester["courses"].splice(index, 1);
                    self.processResponse(response);
                })
                .catch(function (response) {
                    self.processResponse(response, "error");
                })
                .finally(function () {
                });
        }
    }

    this.init();
}
programPlannerModule.controller("adminProgramSemesterCourseController", ["$scope", "$uibModal", "$timeout", "programPlannerApiService", AdminProgramSemesterCourseController]);

/**
 * Use this modal controller only if the content for the modal is to be requires calls to server
 */
function ModalController($scope, $uibModal) {
    var self = this;
    this.init = function () {    return;   }

    /**
     * @param templateUrl       the id of the angular modal container, it must be loaded in DOM
     * @param controllerName    the name of controller to manage the scope of the modal
     * @param modalSize         the size of the modal
     *  
     */
    this.open = function (templateUrl, controllerName, modalSize) {
        var modal = $uibModal.open({
            templateUrl: templateUrl,
            controller: controllerName + ' as modal',
            size: modalSize ? modalSize : 'lg',
            backdrop: 'static', // disable modal close by clicking outside modal
            keyboard: false, // disable modal close by ESC key
        });
    }

    this.init();
}


programPlannerModule.controller("modalController", ["$scope", "$uibModal", ModalController]);
